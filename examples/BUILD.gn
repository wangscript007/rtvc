
import("//webrtc.gni")

if (is_android) {
  import("//build/config/android/config.gni")
  import("//build/config/android/rules.gni")
} else if (is_mac) {
  import("//build/config/mac/rules.gni")
} else if (is_ios) {
  import("//build/config/ios/rules.gni")
}

group("examples") {
  # This target shall build all targets in examples.
  testonly = true
  deps = []

  if (is_linux || is_win) {
    deps += [
      ":rtvc_server",
    ]
    if (current_os != "winuwp") {
      deps += [ ":rtvc_client" ]
    }
  }
}

if (is_linux || is_win) {
  rtc_executable("rtvc_client") {
    testonly = true
    sources = [
      "peerconnection/client/conductor.cc",
      "peerconnection/client/conductor.h",
      "peerconnection/client/defaults.cc",
      "peerconnection/client/defaults.h",
      "peerconnection/client/peer_connection_client.cc",
      "peerconnection/client/peer_connection_client.h",
    ]

    deps = [
      "//api:audio_options_api",
      "//api:create_peerconnection_factory",
      "//api:libjingle_peerconnection_api",
      "//api:scoped_refptr",
      "//api/audio:audio_mixer_api",
      "//api/audio_codecs:audio_codecs_api",
      "//api/video:video_frame_i420",
      "//api/video_codecs:video_codecs_api",
      "//media:rtc_media_base",
      "//p2p:rtc_p2p",
      "//rtc_base:checks",
      "//rtc_base/third_party/sigslot",
      "//system_wrappers:field_trial",
      "//test:field_trial",
      "//third_party/abseil-cpp/absl/memory",
      "//third_party/abseil-cpp/absl/types:optional",
      "../third_party/vie",
      "../rtc:media_engine",
      "../rtc:media_video",
      "../api:create_peerconnection_factory",
    ]
    if (is_win) {
      sources += [
        "peerconnection/client/flag_defs.h",
        "peerconnection/client/main.cc",
        "peerconnection/client/main_wnd.cc",
        "peerconnection/client/main_wnd.h",
      ]
      configs += [ "//build/config/win:windowed" ]
      deps += [ "//media:rtc_media_base" ]
    }
    if (is_linux) {
      sources += [
        "peerconnection/client/linux/main.cc",
        "peerconnection/client/linux/main_wnd.cc",
        "peerconnection/client/linux/main_wnd.h",
      ]
      cflags = [ "-Wno-deprecated-declarations" ]
      libs = [
        "X11",
        "Xcomposite",
        "Xext",
        "Xrender",
      ]
      deps += [ "//build/config/linux/gtk" ]
    }

    deps += [
      "//api:libjingle_peerconnection_api",
      "//api/audio_codecs:builtin_audio_decoder_factory",
      "//api/audio_codecs:builtin_audio_encoder_factory",
      "//api/video:video_frame",
      "//api/video_codecs:builtin_video_decoder_factory",
      "//api/video_codecs:builtin_video_encoder_factory",
      "//media:rtc_audio_video",
      "//modules/audio_device:audio_device",
      "//modules/audio_processing:api",
      "//modules/audio_processing:audio_processing",
      "//modules/video_capture:video_capture_module",
      "//pc:libjingle_peerconnection",
      "//pc:peerconnection",
      "//rtc_base:rtc_base",
      "//rtc_base:rtc_base_approved",
      "//rtc_base:rtc_json",
      "//test:video_test_common",
      "//third_party/libyuv",
    ]
  }

  rtc_executable("rtvc_server") {
    testonly = true
    sources = [
      "peerconnection/server/data_socket.cc",
      "peerconnection/server/data_socket.h",
      "peerconnection/server/main.cc",
      "peerconnection/server/peer_channel.cc",
      "peerconnection/server/peer_channel.h",
      "peerconnection/server/utils.cc",
      "peerconnection/server/utils.h",
    ]
    deps = [
      "//rtc_base:rtc_base_approved",
      "//rtc_tools:command_line_parser",
      "//system_wrappers:field_trial",
      "//test:field_trial",
    ]
  }
}

From 07239b7d1a3800ab632672db07b6340f5ba3415e Mon Sep 17 00:00:00 2001
From: zengsj <zengshuangjie@gmail.com>
Date: Tue, 11 Jun 2019 16:18:36 +0800
Subject: [PATCH 1/2] fix build with msvc

---
 BUILD.gn                           |  6 ++++++
 api/stats/rtc_stats_report.h       |  3 ++-
 p2p/base/port_allocator.h          |  3 +++
 rtc_base/openssl_stream_adapter.cc |  3 +++
 sdk/android/BUILD.gn               | 20 ++++++++++++++------
 5 files changed, 28 insertions(+), 7 deletions(-)

diff --git a/BUILD.gn b/BUILD.gn
index f5b34591d2..99f380a258 100644
--- a/BUILD.gn
+++ b/BUILD.gn
@@ -24,6 +24,12 @@ if (is_android) {
 }
 
 if (!build_with_chromium) {
+  group("yealink") {
+    testonly = true
+    deps = [
+      "//yealink",
+    ]
+  }
   # This target should (transitively) cause everything to be built; if you run
   # 'ninja default' and then 'ninja all', the second build should do no work.
   group("default") {
diff --git a/api/stats/rtc_stats_report.h b/api/stats/rtc_stats_report.h
index 85da197a7f..9d865750bf 100644
--- a/api/stats/rtc_stats_report.h
+++ b/api/stats/rtc_stats_report.h
@@ -20,6 +20,7 @@
 
 #include "api/scoped_refptr.h"
 #include "api/stats/rtc_stats.h"
+#include "rtc_base/constructor_magic.h"
 #include "rtc_base/ref_count.h"
 #include "rtc_base/ref_counted_object.h"
 #include "rtc_base/system/rtc_export.h"
@@ -59,7 +60,7 @@ class RTC_EXPORT RTCStatsReport : public rtc::RefCountInterface {
   static rtc::scoped_refptr<RTCStatsReport> Create(int64_t timestamp_us = 0);
 
   explicit RTCStatsReport(int64_t timestamp_us);
-  RTCStatsReport(const RTCStatsReport& other) = delete;
+  RTC_DISALLOW_COPY_AND_ASSIGN(RTCStatsReport);
   rtc::scoped_refptr<RTCStatsReport> Copy() const;
 
   int64_t timestamp_us() const { return timestamp_us_; }
diff --git a/p2p/base/port_allocator.h b/p2p/base/port_allocator.h
index 33745ea1ba..7fbe813151 100644
--- a/p2p/base/port_allocator.h
+++ b/p2p/base/port_allocator.h
@@ -18,6 +18,7 @@
 
 #include "p2p/base/port.h"
 #include "p2p/base/port_interface.h"
+#include "rtc_base/constructor_magic.h"
 #include "rtc_base/helpers.h"
 #include "rtc_base/proxy_info.h"
 #include "rtc_base/ssl_certificate.h"
@@ -622,6 +623,8 @@ class RTC_EXPORT PortAllocator : public sigslot::has_slots<> {
   // if ice_credentials is nullptr.
   std::vector<std::unique_ptr<PortAllocatorSession>>::const_iterator
   FindPooledSession(const IceParameters* ice_credentials = nullptr) const;
+
+  RTC_DISALLOW_COPY_AND_ASSIGN(PortAllocator);
 };
 
 }  // namespace cricket
diff --git a/rtc_base/openssl_stream_adapter.cc b/rtc_base/openssl_stream_adapter.cc
index e80efd1ffd..3396a9d667 100644
--- a/rtc_base/openssl_stream_adapter.cc
+++ b/rtc_base/openssl_stream_adapter.cc
@@ -73,6 +73,9 @@ constexpr SrtpCipherMapEntry kSrtpCipherMap[] = {
     {"SRTP_AEAD_AES_256_GCM", SRTP_AEAD_AES_256_GCM}};
 
 #ifndef OPENSSL_IS_BORINGSSL
+// Enabled by EnableTimeCallbackForTesting. Should never be set in production
+// code.
+bool g_use_time_callback_for_testing = false;
 // The "SSL_CIPHER_standard_name" function is only available in OpenSSL when
 // compiled with tracing, so we need to define the mapping manually here.
 constexpr SslCipherMapEntry kSslCipherMap[] = {
diff --git a/sdk/android/BUILD.gn b/sdk/android/BUILD.gn
index fe1f19e7c0..b4d4e2b543 100644
--- a/sdk/android/BUILD.gn
+++ b/sdk/android/BUILD.gn
@@ -140,13 +140,17 @@ if (is_android) {
     ]
   }
 
-  rtc_shared_library("libjingle_peerconnection_so") {
+  rtc_static_library("libjingle_peerconnection_so") {
+  # rtc_shared_library("libjingle_peerconnection_so") {
     sources = [
       "src/jni/jni_onload.cc",
     ]
 
-    suppressed_configs += [ "//build/config/android:hide_all_but_jni_onload" ]
-    configs += [ "//build/config/android:hide_all_but_jni" ]
+    # suppressed_configs += [ "//build/config/android:hide_all_but_jni_onload" ]
+    # configs += [ "//build/config/android:hide_all_but_jni" ]
+    
+    complete_static_lib = true
+    suppressed_configs += [ "//build/config/compiler:thin_archive" ]
 
     deps = [
       ":libjingle_peerconnection_jni",
@@ -160,13 +164,17 @@ if (is_android) {
   # The modular build targets can be used to build WebRTC with different
   # functionalities. The users can choose either the real implemenation or the
   # null implementation of the audio/video modules based on their requirments.
-  rtc_shared_library("libjingle_peerconnection_datachannelonly_so") {
+  rtc_static_library("libjingle_peerconnection_datachannelonly_so") {
+  # rtc_shared_library("libjingle_peerconnection_datachannelonly_so") {
     sources = [
       "src/jni/jni_onload.cc",
     ]
 
-    suppressed_configs += [ "//build/config/android:hide_all_but_jni_onload" ]
-    configs += [ "//build/config/android:hide_all_but_jni" ]
+    # suppressed_configs += [ "//build/config/android:hide_all_but_jni_onload" ]
+    # configs += [ "//build/config/android:hide_all_but_jni" ]
+
+    complete_static_lib = true
+    suppressed_configs += [ "//build/config/compiler:thin_archive" ]
 
     deps = [
       ":base_jni",
-- 
2.15.1.windows.2

